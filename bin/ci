require 'logger'

logger = Logger.new(STDOUT)

begin
  `mkdir artifacts`

  image_name = "sholden/docking:#{ENV['BUILD_NUMBER']}"

  success = true

  build_command = "docker build -t #{image_name} ."
  logger.info "Building container: #{build_command}"
  success &= system(build_command)

  db_run_command = 'docker run -d --name dockingdb -p "3306:3306" -e MYSQL_PASS="docking" tutum/mysql'
  logger.info "Starting database: #{db_run_command}"
  db_container_id = `#{db_run_command}`.strip
  logger.info "Started db container: #{db_container_id}"

  sleep 10

  ci_command = "docker run --link dockingdb:db -v \"$WORKSPACE:/artifacts\" -e DATABASE_URL=\"mysql2://admin:docking@db:3306/docking_test\" -e RAILS_ENV=test -e CI=true -e CI_REPORTS=$WORKSPACE/reports -e COVERAGE=true #{image_name} /bin/bash -c \"bundle exec rake db:drop db:create db:migrate spec\""
  logger.info "Running rake spec: #{ci_command}"
  success &= system(ci_command)

  db_stop_command = "docker stop #{db_container_id}"
  logger.info "Stopping database container: #{db_stop_command}"
  success &= system(db_stop_command)

  db_rm_command = "docker rm #{db_container_id}"
  logger.info "Removing db container: #{db_rm_command}"
  success &= system(db_rm_command)

  raise 'Build failed.' unless success
end